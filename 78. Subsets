Given an integer array nums of unique elements, return all possible 
subsets
 (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
 

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10
All the numbers of nums are unique.

class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> result=new ArrayList<>();
        find(nums,0,new ArrayList<>(),result);
        return result;
    }
    public void find(int [] nums,int start,List<Integer> arr,List<List<Integer>> result){
        result.add(new ArrayList<>(arr));
        for (int i = start; i < nums.length; i++){
            arr.add(nums[i]);
            find(nums, i + 1, arr, result);
            arr.remove(arr.size() - 1);
        }
    }
}

