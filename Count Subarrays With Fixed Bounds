You are given an integer array nums and two integers minK and maxK.

A fixed-bound subarray of nums is a subarray that satisfies the following conditions:

The minimum value in the subarray is equal to minK.
The maximum value in the subarray is equal to maxK.
Return the number of fixed-bound subarrays.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [1,3,5,2,7,5], minK = 1, maxK = 5
Output: 2
Explanation: The fixed-bound subarrays are [1,3,5] and [1,3,5,2].
Example 2:

Input: nums = [1,1,1,1], minK = 1, maxK = 1
Output: 10
Explanation: Every subarray of nums is a fixed-bound subarray. There are 10 possible subarrays.
 

Constraints:

2 <= nums.length <= 105
1 <= nums[i], minK, maxK <= 106


class Solution {
    public long countSubarrays(int[] nums, int minK, int maxK) {
        int minI=-1;
        int maxI=-1;
        long count=0;
        int right=0;
        int left=-1;
        while(right<nums.length){
            if(nums[right]<minK || nums[right]>maxK){
                minI=right;
                maxI=right;
                left=right;
            }
            minI=nums[right]==minK?right:minI;
            maxI=nums[right]==maxK?right:maxI;
            count+=Math.min(minI,maxI)-left;
            right++;
        }
        return count;
    }
}
