Given a string s containing only three types of characters: '(', ')' and '*', return true if s is valid.

The following rules define a valid string:

Any left parenthesis '(' must have a corresponding right parenthesis ')'.
Any right parenthesis ')' must have a corresponding left parenthesis '('.
Left parenthesis '(' must go before the corresponding right parenthesis ')'.
'*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string "".
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "(*)"
Output: true
Example 3:

Input: s = "(*))"
Output: true
 

Constraints:

1 <= s.length <= 100
s[i] is '(', ')' or '*'.



class Solution {
    public boolean checkValidString(String s) {
        int left = 0;
        int right = 0;
        // Iterate from left to right treating '*' as '('
        for (char c : s.toCharArray()) {
            if (c == '(' || c == '*') {
                left++;
            } else {
                left--;
            }
            // Check if ')' can be matched with '(' or '*'
            if (left < 0) return false;
        }
        // Reset counts for matching from right to left
        left = 0;
        // Iterate from right to left treating '*' as ')'
        for (int i = s.length() - 1; i >= 0; i--) {
            char c = s.charAt(i);
            if (c == ')' || c == '*') {
                left++;
            } else {
                left--;
            }
            // Check if '(' can be matched with ')' or '*'
            if (left < 0) return false;
        }
        return true;
    }
}
