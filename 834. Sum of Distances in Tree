There is an undirected connected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.

You are given the integer n and the array edges where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.

Return an array answer of length n where answer[i] is the sum of the distances between the ith node in the tree and all other nodes.

 

Example 1:


Input: n = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]
Output: [8,12,6,10,10,10]
Explanation: The tree is shown above.
We can see that dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5)
equals 1 + 1 + 2 + 2 + 2 = 8.
Hence, answer[0] = 8, and so on.
Example 2:


Input: n = 1, edges = []
Output: [0]
Example 3:


Input: n = 2, edges = [[1,0]]
Output: [1,1]
 

Constraints:

1 <= n <= 3 * 104
edges.length == n - 1
edges[i].length == 2
0 <= ai, bi < n
ai != bi
The given input represents a valid tree.


class Solution {
    public int[] sumOfDistancesInTree(int N, int[][] edges) {
        HashSet<Integer>[] adj = new HashSet[N];
        for (int i = 0; i < N; i++) {
            adj[i] = new HashSet<>();
        }
        for (int[] edge : edges) {
            adj[edge[0]].add(edge[1]);
            adj[edge[1]].add(edge[0]);
        }
        int[] distance = new int[N], size = new int[N];
        boolean[] visited = new boolean[N];
        search(adj, distance, size, new boolean[N], 0);
        search2(adj, distance, size, new boolean[N], 0);
        return distance;
    }

    public void search(HashSet<Integer>[] adj, int[] distance, int[] size, boolean[] visited, int current) {
        visited[current] = true;
        size[current] = 1;
        for (int i : adj[current]) {
            if (!visited[i]) {
                search(adj, distance, size, visited, i);
                distance[current] += distance[i] + size[i];
                size[current] += size[i];
            }
        }
    }

    public void search2(HashSet<Integer>[] adj, int[] distance, int[] size, boolean[] visited, int current) {
        visited[current] = true;
        for (int i : adj[current]) {
            if (!visited[i]) {
                distance[i] += distance[current] - distance[i] - size[i] + size[current] - size[i];
                size[i] = size[current];
                search2(adj, distance, size, visited, i);
            }
        }
    }
}
